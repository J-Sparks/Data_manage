# Import libraries
library(shiny)
library(shinythemes)
library(data.table)
library(RCurl)
library(randomForest)
library(naivebayes)
library(readr)
library(caret)
library(dplyr)

# Read data
Dropout <- read.csv("C:/Users/jk99/Desktop/RankDropNB_df.csv")
# Performs stratified random split of the data set
TrainingIndex <- createDataPartition(Dropout$Dropouts, p=0.8, list = FALSE)
TrainingSet <- Dropout[TrainingIndex,] # Training Set
TestingSet <- Dropout[-TrainingIndex,] # Test Set

write.csv(TrainingSet, "training.csv")
write.csv(TestingSet, "testing.csv")

TrainSet <- read.csv("training.csv", header = TRUE)
TrainSet <- TrainSet[,-1]

# Build model
#model <- naive_bayes(Dropouts ~ ., data = Dropout)
modelNB <- naive_bayes(Dropouts ~ ., data = TrainSet)

# Save model to RDS file
saveRDS(modelNB, "model.rds")

# Read in the RF model
model <- readRDS("model.rds")

####################################
# User interface                   #
####################################

ui <- fluidPage(theme = shinytheme("united"),
                
                # Page header
                headerPanel('How likely to dropout?'),
                
                # Input values
                sidebarPanel(
                  HTML("<h3>Input parameters</h3>"),
                  
                  sliderInput("PriorHrs", label = "PriorHrs:",
                              min = min(TrainSet$PriorHrs),
                              max = max(TrainSet$PriorHrs),
                              value = 6),
                  sliderInput("UWFEarnedTerm1Hrs", "UWFEarnedTerm1Hrs:",
                              min = min(TrainSet$UWFEarnedTerm1Hrs),
                              max = max(TrainSet$UWFEarnedTerm1Hrs),
                              value = 12),
                  sliderInput("GPA_HIGHSCHOOL", "GPA_HIGHSCHOOL:",
                              min = min(TrainSet$GPA_HIGHSCHOOL),
                              max = max(TrainSet$GPA_HIGHSCHOOL),
                              value = 3.8),
                  sliderInput("UWFGPATerm1", "UWFGPATerm1:",
                              min = min(TrainSet$UWFGPATerm1),
                              max = max(TrainSet$UWFGPATerm1),
                              value = 2.9),
                  selectInput("Start_Major", label = "Start_Major:", 
                              choices = list("Biomedical Sciences" = "Biomedical Sciences", "Chem&BioChem" = "Chem&BioChem","Computer Science"="Computer Science",
                                             "Cybersecurity"="Cybersecurity","Environmental Management"="Environmental Management","HMCSE_Engineering"="HMCSE_Engineering",
                                             "Information Technology" = "Information Technology", "Marine Biology&Others" = "Marine Biology&Others","Mathematics"="Mathematics",
                                             "Mathematics Teaching "="Mathematics Teaching ","Physics"="Physics","Software Design & Development"="Software Design & Development"), 
                              selected = "Cybersecurity"),
                  selectInput("Gender", label = "Gender:", 
                              choices = list("F" = "F", "M" = "M"), 
                              selected = "Male"),
                  selectInput("Ethnicity", label = "Ethnicity:", 
                              choices = list("African American"="African American","American Indian/Alaskan Native"="American Indian/Alaskan Native","Asian"="Asian","Hispanic"="Hispanic",
                                             "Native Hawaiian or Pacific Islander"="Native Hawaiian or Pacific Islander","Non-Resident Alien"="Non-Resident Alien","Not Reported"="Not Reported","Two or More"="Two or More",
                                             "White"="White"), 
                              selected = "White"),
                  selectInput("FirstTermMathCrs", label = "FirstTermMathCrs:", 
                              choices = list("MAC1105"="MAC1105","MAC1105C"="MAC1105C","MAC1114"="MAC1114","MAC1140"="MAC1140","MAC1147"="MAC1147","MAC2311"="MAC2311",
                                             "MAC2312"="MAC2312","MAC2313"="MAC2313",
                                             "MAS3105"="MAS3105","NoAttempt"="NoAttempt","STA2023"="STA2023"), 
                              selected = "MAC1147"),
                  selectInput("EarnedGrade", label = "EarnedGrade:", 
                              choices = list("A/B_Range"="A/B_Range","C_Range"="C_Range","D/F/NF"="D/F/NF","NoAttempt"="NoAttempt","W"="W"), 
                              selected = "A/B_Range"),
                 
                  selectInput("County", label = "County:",
                              choices = list("Bay"="Bay","Duval"="Duval","Escambia"="Escambia","Non-Florida"="Non-Florida","Okaloosa"="Okaloosa","Others"="Others",
                                             "Pasco"="Pasco","Santa Rosa"="Santa Rosa","Walton"="Walton"), 
                              selected = "Santa Rosa"),
                  
                  actionButton("submitbutton", "Submit", class = "btn btn-primary")
                ),
                
                mainPanel(
                  tags$label(h3('Status/Output')), # Status/Output Text Box
                  verbatimTextOutput('contents'),
                  tableOutput('tabledata') # Prediction results table
                  
                )
)

####################################
# Server                           #
####################################

server <- function(input, output, session) {
  
  # Input Data
  datasetInput <- reactive({  
    
    
    df <- data.frame(
      Name = c("PriorHrs",
               "UWFEarnedTerm1Hrs",
               "GPA_HIGHSCHOOL",
               "UWFGPATerm1",
               "Start_Major",
               "Gender",
               "Ethnicity",
               "FirstTermMathCrs",
               "EarnedGrade",
               "County"),
      Value = as.character(c(input$PriorHrs,
                             input$UWFEarnedTerm1Hrs,
                             input$GPA_HIGHSCHOOL,
                             input$UWFGPATerm1,
                             input$Start_Major,
                             input$Gender,
                             input$Ethnicity,
                             input$FirstTermMathCrs,
                             input$EarnedGrade,
                             input$County)),
      stringsAsFactors = FALSE)
    
    Dropouts <- 0
    df <- rbind(df, Dropouts)
    input <- transpose(df)
    
    write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
    
    test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
    
    test$Start_Major <- factor(test$Start_Major, levels = c("Biomedical Sciences", "Chem&BioChem", "Computer Science","Cybersecurity",
                                                           "Environmental Management","HMCSE_Engineering","Information Technology",
                                                           "Marine Biology&Others","Mathematics","Mathematics Teaching",
                                                           "Natural Science","Physics","Software Design & Development"))
    test$Ethnicity <- factor(test$Ethnicity, levels = c("African American","American Indian/Alaskan Native","Asian","Hispanic",
                                                        "Native Hawaiian or Pacific Islander","Non-Resident Alien","Not Reported","Two or More",
                                                        "White"))
    test$FirstTermMathCrs <- factor(test$FirstTermMathCrs, levels = c("MAC1105","MAC1105C","MAC1114","MAC1140","MAC1147","MAC2311",
                                                                      "MAC2312","MAC2313","MAS3105","NoAttempt","STA2023"))
    
    test$EarnedGrade <- factor(test$EarnedGrade, levels = c("A/B_Range","C_Range","D/F/NF","NoAttempt","W"))
    
    test$County <- factor(test$County, levels = c("Bay","Duval","Non-Florida","Okaloosa","Others","Pasco","Santa Rosa","Walton"))
     
    test$Gender <- factor(test$Gender, levels=c("F","M"))
    
    test$Dropouts <- factor(test$Dropouts, levels = c("Dropped","Retained"))
    
    Output <- data.frame(Prediction=round(predict(modelNB,test,type="prob"), 3))
    print(Output)
  })
 
  
  # Status/Output Text Box
  output$contents <- renderPrint({
    if (input$submitbutton>0) { 
      isolate("Calculation complete.") 
    } else {
      return("Please,ready for calculation.")
    }
  })
  
  # Prediction results table
  output$tabledata <- renderTable({
    if (input$submitbutton>0) { 
      isolate(datasetInput()) 
    } 
  })
  
}

####################################
# Create the shiny app             #
####################################
shinyApp(ui = ui, server = server)

